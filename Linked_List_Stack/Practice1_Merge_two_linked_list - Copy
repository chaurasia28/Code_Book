// Merge two linked list
#include<iostream>
using namespace std;
class Node
{
    public:
           int data;
           Node* next;
           Node(int data)
           {
               this->data=data;
               this->next=NULL;
           }
    
};
Node* append(Node* root,int data)
{
    if(root==NULL)
    {
        return new Node(data);
    }
    Node* temp=root;
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp->next=new Node(data);
    return root;
}
Node* merge(Node* root1,Node* root2)
{
    if(root1==NULL)
    {
        return root2;
    }
    if(root2==NULL)
    {
        return root1;
    }
    Node* root=NULL;
    while(root1!=NULL && root2!=NULL)
    {
        root=append(root,root1->data);
        root=append(root,root2->data);
        root1=root1->next;
        root2=root2->next;
    }
    while(root1!=NULL)
    {
        root=append(root,root1->data);
        root1=root1->next;
    }
    while(root2!=NULL)
    {
        root=append(root,root2->data);
        root2=root2->next;
    }
    return root;
}
void print(Node* root)
{
    if(root==NULL)
    {
        cout<<" ";
    }
    else
    {
        Node* temp=root;
        while(temp!=NULL)
        {
            cout<<temp->data<<" ";
            temp=temp->next;
        }
        cout<<endl;
    }
}
int main()
{
    int n1,n2;
    cin>>n1>>n2;
    Node* root1=NULL;
    for(int i=0;i<n1;i++)
    {
        int data;
        cin>>data;
        root1=append(root1,data);
    }
    //print(root1);
    Node* root2=NULL;
    for(int i=0;i<n2;i++)
    {
        int data;
        cin>>data;
        root2=append(root2,data);
    }
    //print(root2);
    Node* root=merge(root1,root2);
    print(root);
}