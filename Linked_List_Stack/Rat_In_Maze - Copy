// Online C++ compiler to run C++ program online
#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;
    bool is_safe(vector<vector<int>>&m,int n,vector<vector<int>>&visiting,int x,int y)
    {
        if((x>=0 && x<n)&&(y>=0 && y<n)&& (visiting[x][y]==0) && (m[x][y]==1))
        {
            return true;
        }
        return false;
    }
    void solve(vector<vector<int>>&m,int n,vector<string>&ans,string path,int x,int y,vector<vector<int>>&visiting)
    {
        if(x==n-1 && y==n-1)
        {
            ans.push_back(path);
            return ;
        }
        visiting[x][y]=1;
        //Down
        int newx=x+1;
        int newy=y;
        if(is_safe(m,n,visiting,newx, newy))
        {
            path.push_back('D');
            solve(m,n,ans,path,newx,newy,visiting);
            path.pop_back();
        }
        //left
        newx=x;
        newy=y-1;
        if(is_safe(m,n,visiting,newx, newy))
        {
            path.push_back('L');
            solve(m,n,ans,path,newx,newy,visiting);
            path.pop_back();
        }
        //Right
        newx=x;
        newy=y+1;
        if(is_safe(m,n,visiting,newx, newy))
        {
            path.push_back('R');
            solve(m,n,ans,path,newx,newy,visiting);
            path.pop_back();
        }
        //UP
        newx=x-1;
        newy=y;
        if(is_safe(m,n,visiting,newx, newy))
        {
            path.push_back('U');
            solve(m,n,ans,path,newx,newy,visiting);
            path.pop_back();
        }
        visiting[x][y]=0;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<string>ans;
        vector<vector<int>>visiting=m;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                visiting[i][j]=0;
            }
        }
        if(m[0][0]==0)
        {
            return ans;
        }
        string path="";
        int srcx=0;
        int srcy=0;
        solve(m,n,ans,path,srcx,srcy,visiting);
        sort(ans.begin(),ans.end());
        return ans;
    }
int main()
{
    int n;
    cin >> n;
    vector<vector<int>> m(n, vector<int>(n));
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++)
        {
            cin >> m[i][j];
        }
    }
    vector<string> result = findPath(m, n);
    for (const auto &path : result) {
        cout << path << endl;
    }
}