#include<iostream>
#include<vector>
using namespace std;
class Node{
    public: 
           int data;
           Node* left;
           Node* right;
           Node(int data)
           {
               this->data=data;
               this->left=NULL;
               this->right=NULL;
           }
    
};
void buildtree(Node* &root,int *arr,int i,int n)
{
    if(i>=n)
    {
        return;
    }
    root=new Node(arr[i]);
    buildtree(root->left,arr,2*i+1,n);
    buildtree(root->right,arr,2*i+2,n);
}
void inorder(Node* &root,vector<int>&ans)
{
    if(root==NULL)
    {
        return;
    }
    inorder(root->left,ans);
    ans.push_back(root->data);
    inorder(root->right,ans);
}
bool validBST(Node* &root)
{
    vector<int>ans;
    inorder(root,ans);
    for(int i=0;i<ans.size()-1;i++)
    {
        if(ans[i]>ans[i+1])
        {
           return false; 
        }
    }
    return true;
}
int main()
{
    Node* root=NULL;
    int n;
    cin>>n;
    int arr[100];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int i=0;
    buildtree(root,arr,i,n);
    if(validBST(root))
    {
        cout<<"True"<<endl;
    }
    else
    {
        cout<<"False"<<endl;
    }
}