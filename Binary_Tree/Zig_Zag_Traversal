#include<iostream>
#include<queue>
#include<vector>
#include<algorithm>
using namespace std;
class Node{
    public:
           int data;
           Node* left;
           Node* right;
           Node(int data)
           {
               this->data=data;
               this->left=NULL;
               this->right=NULL;
           }
};
void buildleveltree(Node* &root)
{
    int data;
    cin>>data;
    root=new Node(data);
    queue<Node*>q;
    q.push(root);
    while(!q.empty())
    {
        Node* temp=q.front();
        q.pop();
        int leftdata;
        cin>>leftdata;
        if(leftdata!=-1)
        {
            temp->left=new Node(leftdata);
            q.push(temp->left);
        }
        int rightdata;
        cin>>rightdata;
        if(rightdata!=-1)
        {
            temp->right=new Node(rightdata);
            q.push(temp->right);
        }
    }
    
}
vector<int>zigzag(Node* &root)
{
    vector<int>ans;
    if(root==NULL)
    {
        return ans;
    }
    queue<Node*>q;
    q.push(root);
    bool lefttoright=true;
    while(!q.empty())
    {
        int size=q.size();
        vector<int>temp(size);
        //Level Processing
        for(int i=0;i<size;i++)
        {
            Node* frontnode=q.front();
            q.pop();
            int index=lefttoright?i:size-i-1;
            temp[index]=frontnode->data;
            if(frontnode->left!=NULL)
            {
                q.push(frontnode->left);
            }
            if(frontnode->right!=NULL)
            {
                q.push(frontnode->right);
            }
        }
        lefttoright=!lefttoright;
        for(auto i:temp)
        {
            ans.push_back(i);
        }
    }
    return ans;
}
    
int main()
{
    Node* root=NULL;
    buildleveltree(root);
    vector<int>ans=zigzag(root);
    for(auto i:ans)
    {
        cout<<i<<" ";
    }
}