#include<iostream>
#include<map>
#include<vector>
#include<queue>
using namespace std;
class Node
{
    public:
           int data;
           Node* left;
           Node* right;
           Node(int data)
           {
               this->data=data;
               this->left=NULL;
               this->right=NULL;
           }
};
void buildleveltree(Node* &root)
{
    queue<Node*>q;
    int data;
    cin>>data;
    root=new Node(data);
    q.push(root);
    while(!q.empty())
    {
        Node* temp=q.front();
        q.pop();
        int leftnode;
        cin>>leftnode;
        if(leftnode!=-1)
        {
            temp->left=new Node(leftnode);
            q.push(temp->left);
        }
        int rightnode;
        cin>>rightnode;
        if(rightnode!=-1)
        {
            temp->right=new Node(rightnode);
            q.push(temp->right);
        }
    }
}
vector<int> bottomView(Node* &root){
    // Write your code here.
    vector<int>ans;
    map<int,int>bottomview;//map<horizontal distance,node->data>
    queue<pair<Node*,int>>q;//queue<Nodes*,hd>
    if(root==NULL)
    {
        return ans;
    }
    q.push(make_pair(root,0));
    while(!q.empty())
    {
        pair<Node*,int>temp=q.front();
        q.pop();
        Node* frontnode=temp.first;
        int hd=temp.second;
        bottomview[hd]=frontnode->data;
        if(frontnode->left!=NULL)
        {
            q.push(make_pair(frontnode->left,hd-1));
        }
         if(frontnode->right!=NULL)
        {
            q.push(make_pair(frontnode->right,hd+1));
        }
    }
    for(auto it:bottomview)
    {
        ans.push_back(it.second);
    }
    return ans;
}
vector<int>topView(Node* &root)
{
    vector<int>ans;
    if(root==NULL)
    {
        return ans;
    }
    map<int,int>topview;
    queue<pair<Node*,int>>q;
    q.push(make_pair(root,0));
    while(!q.empty())
    {
        pair<Node*,int>temp=q.front();
        q.pop();
        Node* frontnode=temp.first;
        int hd=temp.second;
        if(topview.find(hd)==topview.end())
        {
            topview[hd]=frontnode->data;
        }
        if(frontnode->left!=NULL)
        {
            q.push(make_pair(frontnode->left,hd-1));
        }
        if(frontnode->right!=NULL)
        {
            q.push(make_pair(frontnode->right,hd+1));
        }
    }
    for(auto it:topview)
    {
        ans.push_back(it.second);
    }
    return ans;
}
int main()
{
    Node* root=NULL;
    buildleveltree(root);
    vector<int>ans1=topView(root);
    for(auto it1:ans1)
    {
        cout<<it1<<" ";
    }
    cout<<endl;
    vector<int>ans=bottomView(root);
    for(auto it2:ans)
    {
        cout<<it2<<" ";
    }
}