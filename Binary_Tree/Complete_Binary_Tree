#include<iostream>
#include<queue>
using namespace std;
class Node{
    public:int data;
           Node* left;
           Node* right;
           Node(int data)
           {
               this->data=data;
               this->left=NULL;
               this->right=NULL;
           }
};
void buildtree(Node* &root,int *arr,int i,int n)
{
    queue<Node*>q;
    root=new Node(arr[0]);
    q.push(root);
    i=1;
    while(i<n && !q.empty())
    {
        Node* front=q.front();
        q.pop();
        if(i<n && arr[i]!=-1)
        {
            front->left=new Node(arr[i]);
            q.push(front->left);
        }
        i++;
         if(i<n && arr[i]!=-1)
        {
            front->right=new Node(arr[i]);
            q.push(front->right);
        }
        i++;
    }
    
}

void inorder(Node* &root,int &count)
{
    if(root==NULL)
    {
        return;
    }
    inorder(root->left,count);
    if(root->data!=-1)
    {
       //cout<<root->data<<" ";
       count++; 
    }
    inorder(root->right,count);
}
bool isCBT(Node* &root,int *arr,int index,int count)
{
    if(root==NULL && index<count) 
    {
        return false;
    }
    else if(root==NULL)
    {
        return true;
    }
    else
    {
        bool left=isCBT(root->left,arr,2*index+1,count);
        bool right=isCBT(root->right,arr,2*index+2,count);
        return (left&&right);
    }
    
    
}
int main()
{
    Node* root=NULL;
    int n;
    cin>>n;
    int arr[100];
    for(int i=0;i<n;i++)
    {
       cin>>arr[i]; 
    }
    int  i=0;
    int index=0;
    buildtree(root,arr,i,n);
    int count=0;
    inorder(root,count);
    if(isCBT(root,arr,index,count))
    {
        cout<<"True";
    }
    else
    {
        cout<<"False";
    }
}