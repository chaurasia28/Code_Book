#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
class Node
{
    public:
           int data;
           Node* left;
           Node* right;
           Node(int data)
           {
               this->data=data;
               this->left=NULL;
               this->right=NULL;
           }
};
void buildleveltree(Node* &root)
{
   queue<Node*>q;
   int data;
   cin>>data;
   root=new Node(data);
   q.push(root);
   while(!q.empty())
   {
       Node* temp=q.front();
       q.pop();
       int leftdata;
       cin>>leftdata;
       if(leftdata!=-1)
       {
           temp->left=new Node(leftdata);
           q.push(temp->left);
       }
       int rightdata;
       cin>>rightdata;
       if(rightdata!=-1)
       {
           temp->right=new Node(rightdata);
           q.push(temp->right);
       }
   }
}
pair<bool,int>balancefast(Node* &root)
{
    //Already balance height tree
    if(root==NULL)
    {
        pair<bool,int>p=make_pair(true,0);
        return p;
    }
    //Recursively call for left subtree
    pair<bool,int>left=balancefast(root->left);
    pair<bool,int>right=balancefast(root->right);
    //storing ans for the balance
    bool leftans=left.first;
    bool rightans=right.first;
    bool diff=abs(left.second - right.second)<=1;
    pair<bool,int>ans;
    if(leftans && rightans && diff)
    {
        ans.first=true;
    }
    else
    {
        ans.first=false;
    }
    ans.second=max(left.second,right.second)+1;
    return ans;
}
bool balancetree(Node* &root)
{
    return balancefast(root).first;
}
int main()
{
    Node* root=NULL;
    buildleveltree(root);
   cout<< balancetree(root);
}