#include<iostream>
#include<queue>
using namespace std;
class Node
{
  public:
         int data;
         Node* left;
         Node* right;
         Node(int data)
         {
             this->data=data;
             this->left=NULL;
             this->right=NULL;
         }
         
};
void buildtree(Node* &root)
{
    int data;
    cin>>data;
    root=new Node(data);
    queue<Node*>q;
    q.push(root);
    while(!q.empty())
    {
        Node* temp=q.front();
        q.pop();
        int leftnode,rightnode;
        cin>>leftnode;
        cin>>rightnode;
        if(leftnode!=-1)
        {
            temp->left=new Node(leftnode);
            q.push(temp->left);
        }
        if(rightnode!=-1)
        {
            temp->right=new Node(rightnode);
            q.push(temp->right);
        }
    }
}
void morristraversal(Node* &root)
{
    if(root==NULL)
    {
        cout<<" ";
    }
    Node* curr=NULL;
    curr=root;
    while(curr!=NULL)
    {
        if( curr->left==NULL)
        {
            cout<<curr->data<<" ";
            curr=curr->right;
        }
        else
        {
            //Finding predecessor:One step left and move at right until it find null
            Node* pre=curr->left;
            while(pre->right!=NULL && pre->right!=curr)
            {
                pre=pre->right;
            }
            if(pre->right==NULL)
            {
                pre->right=curr;
                curr=curr->left;
            }
            else
            {
               pre->right=NULL;
               cout<<curr->data<<" ";
               curr=curr->right;
            }
        }
    }
    
}
int main()
{
    Node* root=NULL;
    buildtree(root);
    morristraversal(root);
}