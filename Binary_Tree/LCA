#include<iostream>
#include<algorithm>
#include<queue>
#include<limits.h>
using namespace std;
class Node
{
   public:
           int data;
           Node* left;
           Node* right;
           Node(int data)
           {
               this->data=data;
               this->left=NULL;
               this->right=NULL;
           }
           
};
void buildlevelordertree(Node* &root)
{
    int data;
    cin>>data;
    if(data==-1)
    {
        root=NULL;
        return;
    }
    root=new Node(data);
    queue<Node*>q;
    q.push(root);
    while(!q.empty())
    {
        Node* temp=q.front();
        q.pop();
        int leftnode;
        cin>>leftnode;
        if(leftnode!=-1)
        {
            temp->left=new Node(leftnode);
            q.push(temp->left);
        }
        int rightnode;
        cin>>rightnode;
        if(rightnode!=-1)
        {
            temp->right=new Node(rightnode);
            q.push(temp->right);
        }
    }
}
Node* lca(Node* root,int n1,int n2)
{
    if(root==NULL)
    {
        return NULL;
    }
    if(root->data==n1||root->data==n2)
    {
        return root;
    }
    Node* leftAns=lca(root->left,n1,n2);
    Node* rightAns=lca(root->right,n1,n2);
    if(leftAns==NULL && rightAns==NULL)
    {
        return  NULL;
    }
      if(leftAns==NULL && rightAns!=NULL)
    {
        return  rightAns;
    }
      if(leftAns!=NULL && rightAns==NULL)
    {
        return  leftAns;
    }
      if(leftAns!=NULL && rightAns!=NULL)
    {
        return  root;
    }
    return NULL;
}
int main()
{
    Node* root=NULL; 
    buildlevelordertree(root);
    int n1,n2;
    cin>>n1>>n2;
    cout<<lca(root,n1,n2)->data<<endl;
}