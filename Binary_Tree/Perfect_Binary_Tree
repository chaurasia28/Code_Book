#include<iostream>
#include<cmath>
#include<queue>
using namespace std;
class Node
{
    public:int data;
           Node* left;
           Node* right;
           Node(int data)
           {
               this->data=data;
               this->left=NULL;
               this->right=NULL;
           }
};
void buildtree(Node*&root,int *arr,int i,int n)
{
     queue<Node*>q;
     root=new Node(arr[0]);
     q.push(root);
     i=1;
     while(i<n && !q.empty())
     {
         Node* front=q.front();
         q.pop();
         if(i<n && arr[i]!=-1)
         {
             front->left=new Node(arr[i]);
             q.push(front->left);
         }
         i++;
         if(i<n && arr[i]!=-1)
         {
             front->right=new Node(arr[i]);
             q.push(front->right);
         }
         i++;
     }
}
int height(Node* &root)
{
    if(root==NULL)
    {
        return 0;
    }
    int h1=height(root->left);
    int h2=height(root->right);
    int ans=max(h1,h2)+1;
    return ans;
}
void count(Node* &root,int &tc)
{
    if(root==NULL)
    {
        return;
    }
    count(root->left,tc);
    tc++;
    count(root->right,tc);
}
int main()
{
    Node* root=NULL;
    int arr[100];
    int n,index=0;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    buildtree(root,arr,index,n);
    int h=height(root);
    int tc=0;
    count(root,tc);
    int exp=pow(2,h)-1;
    if(tc==exp)
    {
        cout<<"YES";
    }
    else
    {
        cout<<"NO";
    }
    
}