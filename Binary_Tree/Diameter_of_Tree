#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
class Node
{
    public:int data;
           Node* left;
           Node* right;
           Node(int data)
           {
               this->data=data;
               this->left=NULL;
               this->right=NULL;
           }
};
void buildleveltree(Node* &root)
{
    int data;
    cin>>data;
    queue<Node*>q;
    root=new Node(data);
    q.push(root);
    while(!q.empty())
    {
        Node* temp=q.front();
        q.pop();
        int leftnode;
        cin>>leftnode;
        if(leftnode!=-1)
        {
            temp->left=new Node(leftnode);
            q.push(temp->left);
        }
        int rightnode;
        cin>>rightnode;
        if(rightnode!=-1)
        {
            temp->right=new Node(rightnode);
            q.push(temp->right);
        }
    }
}
pair<int,int>diameterfast(Node* &root)
{
    if(root==NULL)
    {
        pair<int,int>p=make_pair(0,0);
        return p;
    }
    //Recursively calling
    pair<int,int>left=diameterfast(root->left);
    pair<int,int>right=diameterfast(root->right);
    //For finding diameter
    int op1=left.first;
    int op2=right.first;
    int op3=left.second+right.second+1;
    pair<int,int>ans;
    ans.first=max(op1,max(op2,op3));
    ans.second=max(left.second,right.second)+1;
    return ans;
}
int diameter(Node* &root)
{
    return diameterfast(root).first;
}
int main()
{
    Node* root=NULL;
    buildleveltree(root);
    cout<<"Diameter of Tree:(No of nodes on longest path b/w 2 end edges:"<<diameter(root)<<endl;
}