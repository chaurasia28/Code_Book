//First Negative Integer in Every Windows of Size k
#include<iostream>
#include<stack>
#include<queue>
using namespace std;
vector<int>negint(vector<int>arr,int n,int k)
{
    //Processing for first k elements
    vector<int>ans;
    deque<int>dq;
    for(int i=0;i<k;i++)
    {
         if(arr[i]<0)
         {
             dq.push_back(i);
         }
    }
    //storing  first negative element of kth windows
    if(dq.size()>0)
    {
        ans.push_back(arr[dq.front()]);
    }
    else
    {
        ans.push_back(0);
    }
    //Processing for remaining elements
    for(int i=k;i<n;i++)
    {
        //Removal
        if(i-dq.front()>=k)
        {
            dq.pop_front();
        }
        if(arr[i]<0)
        {
            dq.push_back(i);
        }
         if(dq.size()>0)
        {
            ans.push_back(arr[dq.front()]);
        }
        else
        {
            ans.push_back(0);
        }
    }
    return ans;
}
void print(vector<int>ans)
{
    vector<int>temp=ans;
    for(auto it:temp)
    {
        cout<<it<<" ";
    }
}
int main()
{
    vector<int>arr;
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        int data;
        cin>>data;
        arr.push_back(data);
    }
    int k;
    cin>>k;
   vector<int>ans=negint(arr,n,k);
   print(ans);
}