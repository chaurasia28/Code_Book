#include<iostream>
using namespace std;
class nqueue
{
  public:int *arr;
         int *front;
         int *rear;
         int *next;
         int n;
         int k;
         int size;
         int freespot;
         nqueue(int n,int k)
         {
             this->n=n;
             this->k=k;
             arr=new int[n];
             front=new int[k];
             rear=new int[k];
             for(int i=0;i<k;i++)
             {
                 front[i]=-1;
                 rear[i]=-1;
             }
             next=new int[n];
             for(int i=0;i<n;i++)
             {
                 next[i]=i+1;
             }
             next[n-1]=-1;
             freespot=0;
         }
         void push(int data,int qn)
         {
            //Check Overflow condition
              if(freespot==-1)
            {
               cout<<"Space is not free to alloted"<<endl; 
               return;
            }
            //Find index for inserting the element
            int index=freespot;
            //Updating the freepot
            freespot=next[index];
            //Check whether it is first element,(qn-1 for 0th base indexing)
            if(front[qn-1]==-1)
            {
                front[qn-1]=index;
            }
            else
            {
                //Link new element with prev element in queue
                next[rear[qn-1]]=index;
            }
            //remove curr freespot
            next[index]=-1;
            //increment rear for inserting next element
            rear[qn-1]=index;
            //push the element in array
            arr[index]=data;
        }
         int pop(int qn)
         {
             //Check underflow condition
             if(front[qn-1]==-1)
             {
                 cout<<"Queue is empty"<<endl;
                 return -1;
             }
             //Find index which need to pop
             int index=front[qn-1];
             //Update front
             front[qn-1]=next[index];
             //manage freespot
             next[index]=freespot;
             freespot=index;
             return arr[index];
         }
};

int main()
{
    nqueue q1(10,3);
    q1.push(10,1);
    q1.push(12,1);
    q1.push(14,2);
    q1.push(13,1);
    cout<<q1.pop(1)<<endl;
    cout<<q1.pop(2)<<endl;
}