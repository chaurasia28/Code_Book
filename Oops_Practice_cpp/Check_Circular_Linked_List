/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
//Circular-linked-list
#include<iostream>
using namespace std;
class Node
{
    public:
           int data;
           Node* next;
           Node(int d)
           {
               this->data=d;
               this->next=NULL;
           }
           ~Node()
           {
               int val=this->data;
               if(this->next!=NULL)
               {
                   delete next;
                   next=NULL;
               }
               cout<<"Memory delete of element:"<<val;
           }
};
void insertNode(Node* &tail,int element,int d)
{
    //linked-list (when empty)
    if(tail==NULL)
    {
        Node* temp=new Node(d);
        tail=temp;
        temp->next=temp;
    }
    else
    {
        //When element is found then we insert the element next to it
        Node* curr=tail;
        while(curr->data!=element)
        {
            curr=curr->next;
        }
        Node* temp=new Node(d);
        temp->next=curr->next;
        curr->next=temp;
    }
}
void print(Node* &tail)
{
    Node* temp=tail;
    do{
        cout<<tail->data<<" ";
        tail=tail->next;
    }while(temp!=tail);
    cout<<endl;
}
bool Check_Circular(Node* head)
{
    //Empty-case:Circular-linked-list 
    if(head==NULL)
    {
        return true;
    }
    Node* temp=head->next;
    while(temp!=head && temp!=NULL)
    {
        temp=temp->next;
    }
    if(temp==NULL)
    {
        //Non-Circular Condition
        return false;
    }
    else
    {
        //Circular-Condition
        return true;
    }
}
int main()
{
    Node* tail=NULL;
    insertNode(tail,4,3);
    print(tail);
    insertNode(tail,3,5);
    print(tail);
    insertNode(tail,5,7);
    print(tail);
    insertNode(tail,7,9);
    print(tail);
    insertNode(tail,9,12);
    print(tail);
    // insertNode(tail,55,144);
    // print(tail);
    if(Check_Circular(tail))
    {
        cout<<"Yes,Circular Linked list";
    }
    else
    {
        cout<<"Not a Circular Linked List";
    }
}
