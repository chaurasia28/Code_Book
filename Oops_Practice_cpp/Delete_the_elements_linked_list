/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
class Node
{
    public:
           int data;
           Node* prev;
           Node* next;
           Node(int data)
           {
               this->data=data;
               this->prev=NULL;
               this->next=NULL;
           }
           ~Node()
           {
               int val=this->data;
               if(next!=NULL)
               {
                   delete next;
                   next=NULL;
               }
               cout<<"Memory release of value:"<<val<<endl;
           }
};
void insertathead(Node* &head,Node* &tail,int d)
{
    //empty linkedlist
   if(head==NULL)
   {
       Node* temp=new Node(d);
       head=temp;
       tail=temp;
   }
   else
   {
       Node* temp=new Node(d);
       temp->next=head;
       head->prev=temp;
       head=temp;
   }
}
void insertattail(Node* &tail,Node* &head,int d)
{
    //empty linked list
    if(tail==NULL)
    {
        Node* temp=new Node(d);
        tail=temp;
        head=temp;
    }
    else
    {
        Node* temp=new Node(d);
        tail->next=temp;
        temp->prev=tail;
        tail=temp;
    }
}
void print(Node* &head)
{
  Node* temp=head;
  while(temp!=NULL)
  {
      cout<<temp->data<<" ";
      temp=temp->next;
  }
}
void insertatposition(Node* &head,Node* &tail,int position,int d)
{
    //Insert at start
    if(position==1)
    {
        insertathead(head,tail,d);
        return;
    }
    //Insert at last or middle
    Node* temp=head;
    int cnt=1;
    while(cnt<position-1)
    {
       temp=temp->next;
       cnt++;
    }
    if(temp->next==NULL)
    {
        insertattail(tail,head,d);
        return;
    }
    Node* nodetoinsert=new Node(d);
    nodetoinsert->next=temp->next;
    temp->next->prev=nodetoinsert;
    temp->next=nodetoinsert;
    nodetoinsert->prev=temp;
}
void deleteNode(Node* &head,int position)
{
    if(position==1)
    {
       Node* temp=head;
       temp->next->prev=NULL;
       head=temp->next;
       temp->next=NULL;
       delete temp;
    }
    else{
    int cnt=1;
    Node* prev=NULL;
    Node* curr=head;
    while(cnt<position)
    {
        prev=curr;
        curr=curr->next;
        cnt++;
    }
    curr->prev=NULL;
    prev->next=curr->next;
    curr->next=NULL;
    delete curr;
    }
    
}
int main()
{
  Node* head=NULL;
  Node* tail=NULL;
  insertatposition(head,tail,1,1);
  insertatposition(head,tail,2,2);
  insertatposition(head,tail,3,3);
  insertatposition(head,tail,4,4);
  insertatposition(head,tail,5,5);
  insertatposition(head,tail,6,6);
  print(head);
//   deleteNode(head,1);
//   print(head);
  deleteNode(head,3);
  print(head);
//   deleteNode(head,6);
//   print(head);
}